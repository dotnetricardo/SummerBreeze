using Breeze.WebApi;
using SummerBreeze;
using SummerBreezeDemo.Models.DBObjects;
using SummerBreezeDemo.Models.DTO;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace SummerBreezeDemo.Datalayer
{
    public class DTOContextProvider : ISummerBreezeDbContext
    {
        
        public List<ProductDTO> GetSearchResultsDTO(List<Product> products)
        {
            var list = new List<ProductDTO>();

            products.ForEach((p) => {

                var dto = new ProductDTO // this DTO only uses 3 properties of the real Db table Products and has an extra property called SearchDate
                {
                    ProductDTOId = Guid.NewGuid(), //this is absolulely necessary from breeze to track this entity by an id
                    Name = p.Name,
                    PicUrl = p.PicUrl,
                    Price = p.Price,
                    SearchDate = DateTime.Now.ToShortDateString()

                };

                list.Add(dto);
            
            });
            
            return list;
        }

        public void SaveChanges(Breeze.WebApi.SaveWorkState saveWorkState)
        {
           //get your custom saving logic here, for demo purposes this will be very simplistic...
            EntityInfo info = saveWorkState.EntitiesWithAutoGeneratedKeys.Where(e => e.Entity.GetType() == typeof(ProductDTO)).FirstOrDefault();

            var dto = (info.Entity as ProductDTO);
            
            //get dbcontext
            var context = new SummerBreezeDbContext();
            
            //map dto to product
            context.Products.Add(new Product()
            {
                Name = dto.Name,
                PicUrl = dto.PicUrl,
                Price = dto.Price,
                RegisteredDate = DateTime.Now,
                Tags = dto.Name
            });

            //save changes on the db
            context.SaveChanges();

            

            // Add new keymappings to breeze (remember we told breeze to generate a temp id, this is the way breeze knows about the new generated id)
            List<KeyMapping> mappings = new List<KeyMapping>();
            mappings.Add(new KeyMapping() 
            { 
                EntityTypeName = dto.GetType().FullName,
                RealValue = context.Products.Where(p => p.Name == dto.Name).FirstOrDefault().ProductId,
                TempValue = dto.ProductDTOId
                
            });

            saveWorkState.KeyMappings = mappings;

           
            
        }

        public Dictionary<Type, List<Breeze.WebApi.EntityInfo>> BeforeSaveEntities(Dictionary<Type, List<Breeze.WebApi.EntityInfo>> saveMap)
        {
            return saveMap;
        }

        public bool BeforeSaveEntity(Breeze.WebApi.EntityInfo entityInfo)
        {
            return true;
        }

        public List<string> GetTrackedEntities()
        {
            var list = new List<string>();
            list.Add("ProductDTO" );

            return list;
        }





      
    }
}